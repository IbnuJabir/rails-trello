generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  // role          String?
  accounts      Account[]
  sessions      Session[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BoardMember BoardMember[]
  CardComment CardComment[]
  boardsOwned Board[]       @relation("UserBoards") // Relation for boards owned by the user
  Board       Board[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Board {
  id        String        @id @default(uuid())
  name      String
  isPrivate Boolean       @default(true)
  ownerId   String
  owner     User          @relation("UserBoards", fields: [ownerId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  lists     List[]
  members   BoardMember[]
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  bgImage   String?
}

model BoardMember {
  id      String   @id @default(uuid())
  boardId String
  board   Board    @relation(fields: [boardId], references: [id])
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  role    Role
  addedAt DateTime @default(now())
}

model List {
  id        String   @id @default(uuid())
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
  name      String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
}

model Card {
  id          String        @id @default(uuid())
  listId      String
  list        List          @relation(fields: [listId], references: [id])
  title       String
  description String?
  position    Int
  dueDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    CardComment[]
  labels      CardLabel[]
}

model CardComment {
  id        String   @id @default(uuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
}

model CardLabel {
  id     String @id @default(uuid())
  cardId String
  card   Card   @relation(fields: [cardId], references: [id])
  color  String
  text   String
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}
